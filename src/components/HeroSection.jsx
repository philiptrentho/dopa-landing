import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { createClient } from '@supabase/supabase-js';
import './HeroSection.css';

// Initialize Supabase client
const supabaseUrl = 'https://lltkzcrtzxvkypvqoica.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxsdGt6Y3J0enh2a3lwdnFvaWNhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MDcwMzUsImV4cCI6MjA2MDQ4MzAzNX0.FuiXEnaTmk2ypWVo9nXdWksjvE9S3lDo_u8ZdeJC8x4';
const supabase = createClient(supabaseUrl, supabaseKey);

export default function HeroSection() {
    const [showPopup, setShowPopup] = useState(false);
    const [email, setEmail] = useState('');
    const [isValidEmail, setIsValidEmail] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [submitSuccess, setSubmitSuccess] = useState(false);
    const [submitError, setSubmitError] = useState('');

    // Validate email format
    useEffect(() => {
        const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        setIsValidEmail(emailPattern.test(email));
    }, [email]);

    // Handle email submission
    const handleSubmit = async () => {
        if (!isValidEmail) return;

        setIsSubmitting(true);
        setSubmitError('');

        try {
            // Insert email into Supabase - the timestamp will be handled automatically by Supabase
            const { data, error } = await supabase
                .from('signups')
                .insert([{ email }]);

            if (error) throw error;

            setSubmitSuccess(true);
            setTimeout(() => {
                setShowPopup(false);
                setSubmitSuccess(false);
            }, 2000);

        } catch (error) {
            console.error('Error submitting email:', error);
            setSubmitError('Failed to submit email. Please try again.');
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <section className="hero">
            <h1>Your day in the life <em className="autogenerated-text">Autogenerated</em></h1>
            <button className="cta" onClick={() => setShowPopup(true)}>Get early access</button>
            <div className="privacy-notice">Please read our <Link to="/privacy-policy" className="privacy-link">privacy policy</Link></div>

            {/* Email Collection Popup */}
            {showPopup && (
                <div className="popup-overlay">
                    <div className="popup-content">
                        <button
                            className="close-button"
                            onClick={() => setShowPopup(false)}
                        >
                            &times;
                        </button>

                        {submitSuccess ? (
                            <div className="success-message">
                                <h3>Thank you!</h3>
                                <p>We've received your email. We'll be in touch soon.</p>
                            </div>
                        ) : (
                            <>
                                <h3>Get Early Access</h3>
                                <p>Enter your email to join our waitlist</p>

                                <div className="email-form">
                                    <input
                                        type="email"
                                        value={email}
                                        onChange={(e) => setEmail(e.target.value)}
                                        placeholder="yourname@example.com"
                                        className="email-input"
                                    />

                                    {isValidEmail && (
                                        <button
                                            className="submit-button"
                                            onClick={handleSubmit}
                                            disabled={isSubmitting}
                                        >
                                            {isSubmitting ? 'Submitting...' : 'Gimme'}
                                        </button>
                                    )}

                                    {submitError && (
                                        <p className="error-message">{submitError}</p>
                                    )}
                                </div>
                            </>
                        )}
                    </div>
                </div>
            )}
        </section>
    );
} 